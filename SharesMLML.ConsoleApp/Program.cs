// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using SharesMLML.Model;

namespace SharesMLML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"F:\dotnet\SharesML\SharesML\bin\x64\Debug\trainData.csv";

        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Mspj with predicted Mspj from sample data...\n\n");
            Console.WriteLine($"riqi: {sampleData.Riqi}");
            Console.WriteLine($"spj: {sampleData.Spj}");
            Console.WriteLine($"zgj: {sampleData.Zgj}");
            Console.WriteLine($"zdj: {sampleData.Zdj}");
            Console.WriteLine($"kpj: {sampleData.Kpj}");
            Console.WriteLine($"qsp: {sampleData.Qsp}");
            Console.WriteLine($"zdf: {sampleData.Zdf}");
            Console.WriteLine($"hsl: {sampleData.Hsl}");
            Console.WriteLine($"cjl: {sampleData.Cjl}");
            Console.WriteLine($"cjje: {sampleData.Cjje}");
            Console.WriteLine($"zsz: {sampleData.Zsz}");
            Console.WriteLine($"ltsz: {sampleData.Ltsz}");
            Console.WriteLine($"spj0: {sampleData.Spj0}");
            Console.WriteLine($"spj1: {sampleData.Spj1}");
            Console.WriteLine($"spj2: {sampleData.Spj2}");
            Console.WriteLine($"spj3: {sampleData.Spj3}");
            Console.WriteLine($"spj4: {sampleData.Spj4}");
            Console.WriteLine($"zgj0: {sampleData.Zgj0}");
            Console.WriteLine($"zgj1: {sampleData.Zgj1}");
            Console.WriteLine($"zgj2: {sampleData.Zgj2}");
            Console.WriteLine($"zgj3: {sampleData.Zgj3}");
            Console.WriteLine($"zgj4: {sampleData.Zgj4}");
            Console.WriteLine($"zdj0: {sampleData.Zdj0}");
            Console.WriteLine($"zdj1: {sampleData.Zdj1}");
            Console.WriteLine($"zdj2: {sampleData.Zdj2}");
            Console.WriteLine($"zdj3: {sampleData.Zdj3}");
            Console.WriteLine($"zdj4: {sampleData.Zdj4}");
            Console.WriteLine($"kpj0: {sampleData.Kpj0}");
            Console.WriteLine($"kpj1: {sampleData.Kpj1}");
            Console.WriteLine($"kpj2: {sampleData.Kpj2}");
            Console.WriteLine($"kpj3: {sampleData.Kpj3}");
            Console.WriteLine($"kpj4: {sampleData.Kpj4}");
            Console.WriteLine($"qsp0: {sampleData.Qsp0}");
            Console.WriteLine($"qsp1: {sampleData.Qsp1}");
            Console.WriteLine($"qsp2: {sampleData.Qsp2}");
            Console.WriteLine($"qsp3: {sampleData.Qsp3}");
            Console.WriteLine($"qsp4: {sampleData.Qsp4}");
            Console.WriteLine($"zdf0: {sampleData.Zdf0}");
            Console.WriteLine($"zdf1: {sampleData.Zdf1}");
            Console.WriteLine($"zdf2: {sampleData.Zdf2}");
            Console.WriteLine($"zdf3: {sampleData.Zdf3}");
            Console.WriteLine($"zdf4: {sampleData.Zdf4}");
            Console.WriteLine($"hsl0: {sampleData.Hsl0}");
            Console.WriteLine($"hsl1: {sampleData.Hsl1}");
            Console.WriteLine($"hsl2: {sampleData.Hsl2}");
            Console.WriteLine($"hsl3: {sampleData.Hsl3}");
            Console.WriteLine($"hsl4: {sampleData.Hsl4}");
            Console.WriteLine($"cjl0: {sampleData.Cjl0}");
            Console.WriteLine($"cjl1: {sampleData.Cjl1}");
            Console.WriteLine($"cjl2: {sampleData.Cjl2}");
            Console.WriteLine($"cjl3: {sampleData.Cjl3}");
            Console.WriteLine($"cjl4: {sampleData.Cjl4}");
            Console.WriteLine($"cjje0: {sampleData.Cjje0}");
            Console.WriteLine($"cjje1: {sampleData.Cjje1}");
            Console.WriteLine($"cjje2: {sampleData.Cjje2}");
            Console.WriteLine($"cjje3: {sampleData.Cjje3}");
            Console.WriteLine($"cjje4: {sampleData.Cjje4}");
            Console.WriteLine($"zsz0: {sampleData.Zsz0}");
            Console.WriteLine($"zsz1: {sampleData.Zsz1}");
            Console.WriteLine($"zsz2: {sampleData.Zsz2}");
            Console.WriteLine($"zsz3: {sampleData.Zsz3}");
            Console.WriteLine($"zsz4: {sampleData.Zsz4}");
            Console.WriteLine($"ltsz0: {sampleData.Ltsz0}");
            Console.WriteLine($"ltsz1: {sampleData.Ltsz1}");
            Console.WriteLine($"ltsz2: {sampleData.Ltsz2}");
            Console.WriteLine($"ltsz3: {sampleData.Ltsz3}");
            Console.WriteLine($"ltsz4: {sampleData.Ltsz4}");
            Console.WriteLine($"\n\nActual Mspj: {sampleData.Mspj} \nPredicted Mspj: {predictionResult.Score}\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: ',',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
